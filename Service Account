# create the gelldap namespace
oc new-project gelldap
# create a dedicated serviceaccount
oc create serviceaccount openldap
# grant permissions
oc -n gelldap adm policy add-scc-to-user anyuid -z openldap
# add the account to the Kubernetes Deployment
grep serviceAccount ./no_TLS/deployment.yaml || echo '      serviceAccountName: openldap' >> ./no_TLS/deployment.yaml



cd ~/project/gelldap/no_TLS
kustomize build -o ~/project/gelldap/gelldap-build.yaml


cd ~/project/gelldap/

kubectl -n gelldap apply -f ./gelldap-build.yaml



$ oc new-project gelldap
Now using project "gelldap" on server "https://api.pdcesx03051.gelsandbox.race.sas.com:443".

You can add applications to this project with the 'new-app' command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application in Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node --image=k8s.gcr.io/serve_hostname
$ oc create serviceaccount openldap
serviceaccount/openldap created
$ # grant permissions
$ oc -n gelldap adm policy add-scc-to-user anyuid -z openldap
clusterrole.rbac.authorization.k8s.io/system:openshift:scc:anyuid added: "openldap"
$ grep serviceAccount ./no_TLS/deployment.yaml || echo '      serviceAccountName: openldap' >> ./no_TLS/deployment.yaml
$ cd ~/project/gelldap/no_TLS
$ kustomize build -o ~/project/gelldap/gelldap-build.yaml
$ cd ~/project/gelldap/
$ kubectl -n gelldap apply -f ./gelldap-build.yaml
configmap/gelldap-bootstrap-users created
configmap/gelldap-memberof-overlay created
service/gelldap-service created
service/gelmail-service created
deployment.apps/gelldap-server created
deployment.apps/gelmail-server created


